// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RESTFull.Infrastructure;

#nullable disable

namespace RESTFull.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221224185851_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RESTFull.Domain.Achievement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Personid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Personid");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("RESTFull.Domain.Person", b =>
                {
                    b.Property<int>("Personid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Passport")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("patronymic")
                        .HasColumnType("longtext");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Personid");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("RESTFull.Domain.CreativeActivities", b =>
                {
                    b.HasBaseType("RESTFull.Domain.Achievement");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("CreativeActivities", (string)null);
                });

            modelBuilder.Entity("RESTFull.Domain.IntellectualContests", b =>
                {
                    b.HasBaseType("RESTFull.Domain.Achievement");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("IntellectualContests", (string)null);
                });

            modelBuilder.Entity("RESTFull.Domain.Olympiads", b =>
                {
                    b.HasBaseType("RESTFull.Domain.Achievement");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Olympiads", (string)null);
                });

            modelBuilder.Entity("RESTFull.Domain.ScienceActivities", b =>
                {
                    b.HasBaseType("RESTFull.Domain.Achievement");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("ScienceActivities", (string)null);
                });

            modelBuilder.Entity("RESTFull.Domain.SocioCultural", b =>
                {
                    b.HasBaseType("RESTFull.Domain.Achievement");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("SocioCulturals", (string)null);
                });

            modelBuilder.Entity("RESTFull.Domain.Sport", b =>
                {
                    b.HasBaseType("RESTFull.Domain.Achievement");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Sports", (string)null);
                });

            modelBuilder.Entity("RESTFull.Domain.Achievement", b =>
                {
                    b.HasOne("RESTFull.Domain.Person", "Person")
                        .WithMany("Achievement")
                        .HasForeignKey("Personid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RESTFull.Domain.CreativeActivities", b =>
                {
                    b.HasOne("RESTFull.Domain.Achievement", null)
                        .WithOne()
                        .HasForeignKey("RESTFull.Domain.CreativeActivities", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RESTFull.Domain.IntellectualContests", b =>
                {
                    b.HasOne("RESTFull.Domain.Achievement", null)
                        .WithOne()
                        .HasForeignKey("RESTFull.Domain.IntellectualContests", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RESTFull.Domain.Olympiads", b =>
                {
                    b.HasOne("RESTFull.Domain.Achievement", null)
                        .WithOne()
                        .HasForeignKey("RESTFull.Domain.Olympiads", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RESTFull.Domain.ScienceActivities", b =>
                {
                    b.HasOne("RESTFull.Domain.Achievement", null)
                        .WithOne()
                        .HasForeignKey("RESTFull.Domain.ScienceActivities", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RESTFull.Domain.SocioCultural", b =>
                {
                    b.HasOne("RESTFull.Domain.Achievement", null)
                        .WithOne()
                        .HasForeignKey("RESTFull.Domain.SocioCultural", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RESTFull.Domain.Sport", b =>
                {
                    b.HasOne("RESTFull.Domain.Achievement", null)
                        .WithOne()
                        .HasForeignKey("RESTFull.Domain.Sport", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RESTFull.Domain.Person", b =>
                {
                    b.Navigation("Achievement");
                });
#pragma warning restore 612, 618
        }
    }
}
